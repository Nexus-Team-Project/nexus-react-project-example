# .github/workflows/build-push-acr.yml
name: Build and Push Docker Image to ACR

# This workflow can be called by other workflows
on:
  workflow_call:
    # Inputs needed if you want to override env vars from the calling workflow
    # For now, we'll assume env vars are set in this workflow or the calling one.
    inputs:
      # You could pass specific container_name or other env vars if they vary
      # container_name:
      #   description: 'Name of the container image (from env or input)'
      #   required: false
      #   type: string
      # Use the image tag generated by the build process as an output
      # It's good practice to make the relevant secrets explicit for workflow_call
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

# Define environment variables specific to this build workflow
env:
  AZURE_CONTAINER_REGISTRY: "your-azure-container-registry" # Replace with your ACR name
  CONTAINER_NAME: "your-container-name"                     # Replace with your desired container name
  RESOURCE_GROUP: "your-resource-group"                     # Replace with your resource group for ACR

jobs:
  # This job gets package.json info and defines job-level outputs
  setup_and_get_info:
    runs-on: ubuntu-latest
    permissions:
      contents: read # To checkout the code
      id-token: write # Required for azure/login (OIDCs)
    outputs:
      # Make these available to the 'build_image' job and for outputting from the workflow
      package_name: ${{ steps.package_info_step.outputs.package_name }}
      package_version: ${{ steps.package_info_step.outputs.package_version }}
      # We'll calculate the full image tag here too, to make it an output for the workflow
      full_acr_image_tag: ${{ steps.calculate_image_tag.outputs.calculated_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get package name and version from package.json
        id: package_info_step
        run: |
          PACKAGE_NAME=$(jq -r '.name' package.json)
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          PACKAGE_NAME_LOWERCASE=$(echo "$PACKAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "package_name=$PACKAGE_NAME_LOWERCASE" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Calculate Full ACR Image Tag
        id: calculate_image_tag
        run: |
          # Uses CONTAINER_NAME from env vars and github.sha as per original workflow
          FULL_TAG="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}"
          echo "calculated_tag=$FULL_TAG" >> $GITHUB_OUTPUT
        shell: bash
  
  # This job builds and pushes the image
  build_image:
    runs-on: ubuntu-latest
    needs: setup_and_get_info # Depends on the setup job for outputs
    permissions:
      contents: read
      id-token: write # For Azure login
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Build and push image to ACR
        # Use the image tag calculated in the previous job
        run: |
          IMAGE_TAG="${{ needs.setup_and_get_info.outputs.full_acr_image_tag }}"
          echo "Building and pushing image: $IMAGE_TAG"
          az acr build --image "$IMAGE_TAG" --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .